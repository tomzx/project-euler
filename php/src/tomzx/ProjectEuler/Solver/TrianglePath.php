<?php

namespace tomzx\ProjectEuler\Solver;

class TrianglePath
{
	/**
	 * The triangle path solver works the following way:
	 * At each level, compute the largest sum that could be generated by the previous row. For instance
	 * 3
	 * 7 4
	 * 2 4 6
	 * 8 5 9 3
	 * turns into
	 * 3
	 * 10 7
	 * 12 14 13
	 * 20 19 23 16
	 * The solution can then be returned by finding the highest number in the last row (here 23).
	 * This means that for a triangle of height h, the space complexity is O(h) (the most space we'll need is to store
	 * the values of the final row) and the time complexity is O(h^2/2) = O(h^2) (h row iterations x at most h-1 comparisons)
	 * vs the complexity of going through all paths being O(2^(h-1))
	 *
	 * @param int[]  $triangle
	 * @param string $function
	 * @return int
	 */
	public static function solve(array $triangle, $function = 'max')
	{
		$scanRow = $triangle[0];
		array_shift($triangle);
		foreach ($triangle as $row) {
			$rowLength = count($row);
			$newScanRow = [];
			for ($i = 0; $i < $rowLength; ++$i) {
				if ($i === 0) {
					$newScanRow[$i] = $scanRow[0] + $row[0];
				} elseif ($i === $rowLength - 1) {
					$newScanRow[$i] = $scanRow[$i - 1] + $row[$i];
				} else {
					$left = $scanRow[$i - 1] + $row[$i];
					$right = $scanRow[$i] + $row[$i];
					$newScanRow[$i] = $function($left, $right);
				}
			}
			$scanRow = $newScanRow;
		}
		return $function($scanRow);
	}
}
